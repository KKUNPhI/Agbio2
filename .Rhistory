setwd("~/")
install.packages("BiocManager")
BiocManager::install("WGCNA")
library(WGCNA)
help WGCNA
??WGCNA
install.packages(c("matrixStats", "Hmisc", "splines", "foreach", "doParallel", "fastcluster", "dynamicTreeCut", "survival", "BiocManager"))
BiocManager::install(c("GO.db", "preprocessCore", "impute"));
install.packages("BiocManager")
BiocManager::install("WGCNA")
library(WGCNA)
install.packages(c("matrixStats", "Hmisc", "splines", "foreach", "doParallel", "fastcluster", "dynamicTreeCut", "survival", "BiocManager"))
BiocManager::install(c("GO.db", "preprocessCore", "impute"));
#Install mixOmics package
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("mixOmics")
#Load package
library(mixOmics)
#Load data
data(nutrimouse)
X <- nutrimouse$gene
head(X)
#Perform PCA
MyResult.pca <- pca(X)
#Plot results
lotIndiv(MyResult.pca)
#Plot results
plotIndiv(MyResult.pca)
#Plot variables
plotVar(MyResult.pca)
??spca
#construct spca model keeping top 5 varibles for each PC
MyResult.spca <- spca(X, keepX=c(5,5))
#Plot samples
plotIndiv(MyResult.spca)
#Plot variables
plotVar(MyResult.spca)
# Create a sample data frame
df <- data.frame(
Name = c("John", "Alice", "Bob", "Eve"),
Age = c(25, 30, 22, 28),
Gender = c("Male", "Female", "Male", "Female"),
Score = c(85, 90, 88, 92)
)
# Filter rows where Age is greater than 25
df_filtered <- df[df$Age > 25, ]
print(df_filtered)
# Install and load dplyr package
# install.packages("dplyr")
library(dplyr)
# Filter rows where Score is greater than 85 using dplyr
df_filtered <- df %>% filter(Score > 85)
print(df_filtered)
# Filter rows where Age is greater than 25 and Gender is "Male"
df_filtered <- df %>% filter(Age > 25, Gender == "Male")
print(df_filtered)
# Create a sample data frame
df <- data.frame(
Name = c("John", "Alice", "Bob", "Eve"),
Age = c(25, 30, 22, 28),
Score = c(85, 90, 88, 92)
)
# Sort the data frame by Age in ascending order
df_sorted <- df[order(df$Age), ]
print(df_sorted)
# Sort the data frame by Age in descending order
df_sorted_desc <- df[order(-df$Age), ]
print(df_sorted_desc)
# Sort the data frame by multiple columns: first by Score (descending), then by Age (ascending)
df_sorted_multi <- df[order(-df$Score, df$Age), ]
print(df_sorted_multi)
# Sample data frame
df <- data.frame(
Name = c("John", "Alice", "Bob", "Eve"),
Age = c(25, 30, 22, 28),
Gender = c("Male", "Female", "Male", "Female"),
Score = c(85, 90, 88, 92)
)
# Calculate the mean Score for each Gender
mean_score_by_gender <- aggregate(Score ~ Gender, data = df, FUN = mean)
print(mean_score_by_gender)
# Load necessary libraries
library(dplyr)
# Sample data frame with missing values, duplicates, and outliers
df <- data.frame(
Name = c(" John", "Alice", "John", "Eve", NA),
Age = c(25, 30, 25, 28, 40),
Gender = c("Male", "Female", "Male", "Female", "Female"),
Score = c(85, 90, 85, 92, 999)  # 999 is an outlier
)
# Step 1: Remove duplicates
df <- df %>%
distinct()
# Step 2: Trim whitespace from names
df$Name <- trimws(df$Name)
# Step 3: Remove rows with missing values
df <- na.omit(df)
# Step 4: Correct outliers in Score (using the IQR method)
Q1 <- quantile(df$Score, 0.25)
Q3 <- quantile(df$Score, 0.75)
IQR <- Q3 - Q1
lower_bound <- Q1 - 1.5 * IQR
upper_bound <- Q3 + 1.5 * IQR
df$Score <- ifelse(df$Score > upper_bound, median(df$Score), df$Score)
# Step 5: Scale the Score column
df$Score_scaled <- scale(df$Score)
# Step 6: Convert Gender to factor
df$Gender <- as.factor(df$Gender)
# Cleaned data frame
print(df)
# Create sample data
df <- data.frame(
Age = c(22, 25, 30, 35),
Income = c(30000, 45000, 50000, 70000)
)
# Scale the 'Income' column
df$Income_scaled <- scale(df$Income)
print(df)
# Min-Max normalization of the 'Income' column
df$Income_minmax <- (df$Income - min(df$Income))
# Min-Max normalization of the 'Income' column
df$Income_minmax <- (df$Income - min(df$Income))
# Min-Max normalization of the 'Income' column
df$Income_minmax <- (df$Income - min(df$Income))
# Min-Max normalization of the 'Income' column
df$Income_minmax <- (df$Income - min(df$Income))
/ (max(df$Income) - min(df$Income))
# Apply square root transformation to the 'Income' column
df$Income_sqrt <- sqrt(df$Income)
# Apply cube root transformation to the 'Income' column
df$Income_cbrt <- df$Income^(1/3)
print(df)
# Load necessary libraries
library(ggplot2)
# Sample data
df <- data.frame(
group = rep(c("A", "B"), each = 50),
x = c(rnorm(50, mean = 5, sd = 1), rnorm(50, mean = 10, sd = 1)),
y = c(rnorm(50, mean = 5, sd = 1), rnorm(50, mean = 15, sd = 1))
)
# Create a combined plot with scatter and boxplots
p1 <- ggplot(df, aes(x = group, y = y)) +
geom_boxplot(fill = "lightblue") +
labs(title = "Boxplot of Y by Group")
p2 <- ggplot(df, aes(x = x, y = y, color = group)) +
geom_point() +
labs(title = "Scatter Plot by Group")
# Display the plots
print(p1)
print(p2)
# Display the plots
print(p1)
# Load necessary libraries
library(dplyr)
# Create a sample data frame
df <- data.frame(
Gender = c("Male", "Female", "Male", "Female", "Male"),
Age = c(23, 25, 22, 30, 35),
Income = c(50000, 60000, 45000, 70000, 80000)
)
# Calculate basic statistics
mean_age <- mean(df$Age, na.rm = TRUE)
median_income <- median(df$Income, na.rm = TRUE)
sd_income <- sd(df$Income, na.rm = TRUE)
# Create summary statistics table
summary_stats <- df %>%
summarise(
mean_age = mean(Age),
median_income = median(Income),
sd_income = sd(Income)
)
# Visualize the data
hist(df$Age, main = "Histogram of Age", xlab = "Age", col = "blue")
boxplot(df$Income, main = "Boxplot of Income", ylab = "Income", col = "green")
setwd("~/GitHub/Agbio2")

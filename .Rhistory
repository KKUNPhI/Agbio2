setwd("~/")
install.packages("BiocManager")
BiocManager::install("WGCNA")
library(WGCNA)
help WGCNA
??WGCNA
install.packages(c("matrixStats", "Hmisc", "splines", "foreach", "doParallel", "fastcluster", "dynamicTreeCut", "survival", "BiocManager"))
BiocManager::install(c("GO.db", "preprocessCore", "impute"));
install.packages("BiocManager")
BiocManager::install("WGCNA")
library(WGCNA)
install.packages(c("matrixStats", "Hmisc", "splines", "foreach", "doParallel", "fastcluster", "dynamicTreeCut", "survival", "BiocManager"))
BiocManager::install(c("GO.db", "preprocessCore", "impute"));
#Install mixOmics package
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("mixOmics")
#Load package
library(mixOmics)
#Load data
data(nutrimouse)
X <- nutrimouse$gene
head(X)
#Perform PCA
MyResult.pca <- pca(X)
#Plot results
lotIndiv(MyResult.pca)
#Plot results
plotIndiv(MyResult.pca)
#Plot variables
plotVar(MyResult.pca)
??spca
#construct spca model keeping top 5 varibles for each PC
MyResult.spca <- spca(X, keepX=c(5,5))
#Plot samples
plotIndiv(MyResult.spca)
#Plot variables
plotVar(MyResult.spca)
# Create a sample data frame
df <- data.frame(
Name = c("John", "Alice", "Bob", "Eve"),
Age = c(25, 30, 22, 28),
Gender = c("Male", "Female", "Male", "Female"),
Score = c(85, 90, 88, 92)
)
# Filter rows where Age is greater than 25
df_filtered <- df[df$Age > 25, ]
print(df_filtered)
# Install and load dplyr package
# install.packages("dplyr")
library(dplyr)
# Filter rows where Score is greater than 85 using dplyr
df_filtered <- df %>% filter(Score > 85)
print(df_filtered)
# Filter rows where Age is greater than 25 and Gender is "Male"
df_filtered <- df %>% filter(Age > 25, Gender == "Male")
print(df_filtered)
# Create a sample data frame
df <- data.frame(
Name = c("John", "Alice", "Bob", "Eve"),
Age = c(25, 30, 22, 28),
Score = c(85, 90, 88, 92)
)
# Sort the data frame by Age in ascending order
df_sorted <- df[order(df$Age), ]
print(df_sorted)
# Sort the data frame by Age in descending order
df_sorted_desc <- df[order(-df$Age), ]
print(df_sorted_desc)
# Sort the data frame by multiple columns: first by Score (descending), then by Age (ascending)
df_sorted_multi <- df[order(-df$Score, df$Age), ]
print(df_sorted_multi)
# Sample data frame
df <- data.frame(
Name = c("John", "Alice", "Bob", "Eve"),
Age = c(25, 30, 22, 28),
Gender = c("Male", "Female", "Male", "Female"),
Score = c(85, 90, 88, 92)
)
# Calculate the mean Score for each Gender
mean_score_by_gender <- aggregate(Score ~ Gender, data = df, FUN = mean)
print(mean_score_by_gender)
# Load necessary libraries
library(dplyr)
# Sample data frame with missing values, duplicates, and outliers
df <- data.frame(
Name = c(" John", "Alice", "John", "Eve", NA),
Age = c(25, 30, 25, 28, 40),
Gender = c("Male", "Female", "Male", "Female", "Female"),
Score = c(85, 90, 85, 92, 999)  # 999 is an outlier
)
# Step 1: Remove duplicates
df <- df %>%
distinct()
# Step 2: Trim whitespace from names
df$Name <- trimws(df$Name)
# Step 3: Remove rows with missing values
df <- na.omit(df)
# Step 4: Correct outliers in Score (using the IQR method)
Q1 <- quantile(df$Score, 0.25)
Q3 <- quantile(df$Score, 0.75)
IQR <- Q3 - Q1
lower_bound <- Q1 - 1.5 * IQR
upper_bound <- Q3 + 1.5 * IQR
df$Score <- ifelse(df$Score > upper_bound, median(df$Score), df$Score)
# Step 5: Scale the Score column
df$Score_scaled <- scale(df$Score)
# Step 6: Convert Gender to factor
df$Gender <- as.factor(df$Gender)
# Cleaned data frame
print(df)
# Create sample data
df <- data.frame(
Age = c(22, 25, 30, 35),
Income = c(30000, 45000, 50000, 70000)
)
# Scale the 'Income' column
df$Income_scaled <- scale(df$Income)
print(df)
# Min-Max normalization of the 'Income' column
df$Income_minmax <- (df$Income - min(df$Income))
# Min-Max normalization of the 'Income' column
df$Income_minmax <- (df$Income - min(df$Income))
# Min-Max normalization of the 'Income' column
df$Income_minmax <- (df$Income - min(df$Income))
# Min-Max normalization of the 'Income' column
df$Income_minmax <- (df$Income - min(df$Income))
/ (max(df$Income) - min(df$Income))
# Apply square root transformation to the 'Income' column
df$Income_sqrt <- sqrt(df$Income)
# Apply cube root transformation to the 'Income' column
df$Income_cbrt <- df$Income^(1/3)
print(df)
# Load necessary libraries
library(ggplot2)
# Sample data
df <- data.frame(
group = rep(c("A", "B"), each = 50),
x = c(rnorm(50, mean = 5, sd = 1), rnorm(50, mean = 10, sd = 1)),
y = c(rnorm(50, mean = 5, sd = 1), rnorm(50, mean = 15, sd = 1))
)
# Create a combined plot with scatter and boxplots
p1 <- ggplot(df, aes(x = group, y = y)) +
geom_boxplot(fill = "lightblue") +
labs(title = "Boxplot of Y by Group")
p2 <- ggplot(df, aes(x = x, y = y, color = group)) +
geom_point() +
labs(title = "Scatter Plot by Group")
# Display the plots
print(p1)
print(p2)
# Display the plots
print(p1)
# Load necessary libraries
library(dplyr)
# Create a sample data frame
df <- data.frame(
Gender = c("Male", "Female", "Male", "Female", "Male"),
Age = c(23, 25, 22, 30, 35),
Income = c(50000, 60000, 45000, 70000, 80000)
)
# Calculate basic statistics
mean_age <- mean(df$Age, na.rm = TRUE)
median_income <- median(df$Income, na.rm = TRUE)
sd_income <- sd(df$Income, na.rm = TRUE)
# Create summary statistics table
summary_stats <- df %>%
summarise(
mean_age = mean(Age),
median_income = median(Income),
sd_income = sd(Income)
)
# Visualize the data
hist(df$Age, main = "Histogram of Age", xlab = "Age", col = "blue")
boxplot(df$Income, main = "Boxplot of Income", ylab = "Income", col = "green")
setwd("~/Downloads/HT illumina")
library(dada2); packageVersion("dada2")
install.packages('dada2')
library(dada2); packageVersion("dada2")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("dada2", version = "3.11")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("dada2", version = "3.20")
library(dada2); packageVersion("dada2")
path <- "~/Downloads/HT illumina"
# CHANGE ME to the directory containing the fastq files after unzipping.
list.files(path)
fnFs <- sort(list.files(path, pattern="_R1.fastq.gz", full.names = TRUE))
fnRs <- sort(list.files(path, pattern="_R2.fastq.gz", full.names = TRUE))
# Extract sample names, assuming filenames have format: SAMPLENAME_XXX.fastq
sample.names <- sapply(strsplit(basename(fnFs), "_"), `[`, 1)
plotQualityProfile(fnFs[1:2])
plotQualityProfile(fnFs[1:2])
plotQualityProfile(fnRs[1:2])
fnFs
plotQualityProfile(fnFs[1:2])
install.packages("devtools")
library("devtools")
devtools::install_github("benjjneb/dada2", ref="v1.16") # change the ref argument to get other versions
library(dada2); packageVersion("dada2")
library(dada2); packageVersion("dada2")
remove.packages("dada2")
devtools::install_github("benjjneb/dada2", ref="v1.16") # change the ref argument to get other versions
library(dada2); packageVersion("dada2")
devtools::install_github("benjjneb/dada2", ref="v1.16") # change the ref argument to get other versions
library(dada2); packageVersion("dada2")
BiocManager::install("dada2", version = "1.16")
BiocManager::install("dada2", version = "3.20")
path <- "~/Downloads/HT illumina"
# CHANGE ME to the directory containing the fastq files after unzipping.
list.files(path)
'''
Forward and reverse fastq filenames have format:
SAMPLENAME_R1.fastq.gz and SAMPLENAME_R2.fastq
'''
fnFs <- sort(list.files(path, pattern="_R1.fastq.gz", full.names = TRUE))
fnRs <- sort(list.files(path, pattern="_R2.fastq.gz", full.names = TRUE))
# Extract sample names, assuming filenames have format: SAMPLENAME_XXX.fastq
sample.names <- sapply(strsplit(basename(fnFs), "_"), `[`, 1)
plotQualityProfile(fnFs[1:2])
file.exists(fnFS)
file.exists(fnFs)
path <- "~/Downloads/HT illumina"
# CHANGE ME to the directory containing the fastq files after unzipping.
list.files(path)
'''
Forward and reverse fastq filenames have format:
SAMPLENAME_R1.fastq.gz and SAMPLENAME_R2.fastq
'''
fnFs <- sort(list.files(path, pattern="_R1.fastq.gz", full.names = TRUE))
fnRs <- sort(list.files(path, pattern="_R2.fastq.gz", full.names = TRUE))
# Extract sample names, assuming filenames have format: SAMPLENAME_XXX.fastq
sample.names <- sapply(strsplit(basename(fnFs), "_"), `[`, 1)
file.exists(fnFs)
plotQualityProfile(fnFs[1:2])
plotQualityProfile(fnRs[1:2])
# Place filtered files in filtered/ subdirectory
filtFs <- file.path(path, "filtered", paste0(sample.names, "_F_filt.fastq.gz"))
filtRs <- file.path(path, "filtered", paste0(sample.names, "_R_filt.fastq.gz"))
names(filtFs) <- sample.names
names(filtRs) <- sample.names
out <- filterAndTrim(fnFs, filtFs, fnRs, filtRs, truncLen=c(280,250),
maxN=0, maxEE=c(2,2), truncQ=2, rm.phix=TRUE,
compress=TRUE, multithread=TRUE) # On Windows set multithread=FALSE
head(out)
out
errF <- learnErrors(filtFs, multithread=TRUE)
errR <- learnErrors(filtRs, multithread=TRUE)
plotErrors(errF, nominalQ=TRUE)
plotErrors(errR, nominalQ=TRUE)
dadaFs <- dada(filtFs, err=errF, multithread=TRUE)
dadaRs <- dada(filtRs, err=errR, multithread=TRUE)
dadaFs[[1]]
mergers <- mergePairs(dadaFs, filtFs, dadaRs, filtRs, verbose=TRUE)
# Inspect the merger data.frame from the first sample
head(mergers[[1]])
seqtab <- makeSequenceTable(mergers)
dim(seqtab)
# Inspect distribution of sequence lengths
table(nchar(getSequences(seqtab)))
View(seqtab)
seqtab.nochim <- removeBimeraDenovo(seqtab, method="consensus", multithread=TRUE, verbose=TRUE)
dim(seqtab.nochim)
sum(seqtab.nochim)/sum(seqtab)
getN <- function(x) sum(getUniques(x))
track <- cbind(out, sapply(dadaFs, getN), sapply(dadaRs, getN), sapply(mergers, getN), rowSums(seqtab.nochim))
# If processing a single sample, remove the sapply calls: e.g. replace sapply(dadaFs, getN) with getN(dadaFs)
colnames(track) <- c("input", "filtered", "denoisedF", "denoisedR", "merged", "nonchim")
rownames(track) <- sample.names
head(track)
list.files(path)
taxa <- assignTaxonomy(seqtab.nochim, "silva_nr99_v138.2_toSpecies_trainset.fa", multithread=TRUE)
taxa <- addSpecies(taxa, "silva_v138.2_assignSpecies.fa")
taxa.print <- taxa # Removing sequence rownames for display only
rownames(taxa.print) <- NULL
head(taxa.print)
View(taxa.print)
library(DECIPHER); packageVersion("DECIPHER")
if (!requireNamespace("BiocManager", quietly=TRUE))
install.packages("BiocManager")
BiocManager::install("DECIPHER")
library(DECIPHER); packageVersion("DECIPHER")
dna <- DNAStringSet(getSequences(seqtab.nochim)) # Create a DNAStringSet from the ASVs
load("~/tax/IDTaxa/SILVA_SSU_r132_March2018.RData") # CHANGE TO THE PATH OF YOUR TRAINING SET
load("SILVA_SSU_r138_2019.RData") # CHANGE TO THE PATH OF YOUR TRAINING SET
ids <- IdTaxa(dna, trainingSet, strand="top", processors=NULL, verbose=FALSE) # use all processors
ranks <- c("domain", "phylum", "class", "order", "family", "genus", "species") # ranks of interest
# Convert the output object of class "Taxa" to a matrix analogous to the output from assignTaxonomy
taxid <- t(sapply(ids, function(x) {
m <- match(ranks, x$rank)
taxa <- x$taxon[m]
taxa[startsWith(taxa, "unclassified_")] <- NA
taxa
}))
colnames(taxid) <- ranks; rownames(taxid) <- getSequences(seqtab.nochim)
View(taxid)
library(phyloseq); packageVersion("phyloseq")
install.packages('phyloseq')
install.packages('Biostrings')
BiocManager::install("phyloseq")
View(taxa)
View(taxid)
View(taxa)
View(seqtab)
View(seqtab.nochim)
View(seqtab)
View(seqtab.nochim)
BiocManager::install("Biostrings")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("Biostrings")
install.packages('ggplot2')
install.packages('ggplot2')
library(phyloseq); packageVersion("phyloseq")
library(Biostrings); packageVersion("Biostrings")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("phyloseq")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("phyloseq")
library(phyloseq); packageVersion("phyloseq")
library(Biostrings); packageVersion("Biostrings")
library(ggplot2); packageVersion("ggplot2")
theme_set(theme_bw())
samples.out <- rownames(seqtab.nochim)
subject <- sapply(strsplit(samples.out, "H"), `[`, 1)
gender <- substr(subject,1,1)
day <- as.integer(sapply(strsplit(samples.out, "H"), `[`, 2))
samdf <- data.frame(Subject=subject, Gender=gender, Day=day)
samdf$When <- "Healthy"
samdf$When[samdf$Day>100] <- "Healthy"
rownames(samdf) <- samples.out
ps <- phyloseq(otu_table(seqtab.nochim, taxa_are_rows=FALSE),
sample_data(samdf),
tax_table(taxa))
dna <- Biostrings::DNAStringSet(taxa_names(ps))
names(dna) <- taxa_names(ps)
ps <- merge_phyloseq(ps, dna)
taxa_names(ps) <- paste0("ASV", seq(ntaxa(ps)))
ps
plot_richness(ps, x="Day", measures=c("Shannon", "Simpson"), color="When")
# Transform data to proportions as appropriate for Bray-Curtis distances
ps.prop <- transform_sample_counts(ps, function(otu) otu/sum(otu))
ord.nmds.bray <- ordinate(ps.prop, method="NMDS", distance="bray")
plot_ordination(ps.prop, ord.nmds.bray, color="When", title="Bray NMDS")
top20 <- names(sort(taxa_sums(ps), decreasing=TRUE))[1:20]
ps.top20 <- transform_sample_counts(ps, function(OTU) OTU/sum(OTU))
ps.top20 <- prune_taxa(top20, ps.top20)
plot_bar(ps.top20, x="Day", fill="Family") + facet_wrap(~When, scales="free_x")
samdf$When[] <- "Healthy"
rownames(samdf) <- samples.out
ps <- phyloseq(otu_table(seqtab.nochim, taxa_are_rows=FALSE),
sample_data(samdf),
tax_table(taxa))
dna <- Biostrings::DNAStringSet(taxa_names(ps))
names(dna) <- taxa_names(ps)
ps <- merge_phyloseq(ps, dna)
taxa_names(ps) <- paste0("ASV", seq(ntaxa(ps)))
ps
plot_richness(ps, x="Day", measures=c("Shannon", "Simpson"), color="When")
# Transform data to proportions as appropriate for Bray-Curtis distances
ps.prop <- transform_sample_counts(ps, function(otu) otu/sum(otu))
ord.nmds.bray <- ordinate(ps.prop, method="NMDS", distance="bray")
plot_ordination(ps.prop, ord.nmds.bray, color="When", title="Bray NMDS")
top20 <- names(sort(taxa_sums(ps), decreasing=TRUE))[1:20]
ps.top20 <- transform_sample_counts(ps, function(OTU) OTU/sum(OTU))
View(samdf)
samdf <- data.frame(State=day)
samdf$When <- "Healthy"
samdf$When[] <- "Healthy"
rownames(samdf) <- samples.out
ps <- phyloseq(otu_table(seqtab.nochim, taxa_are_rows=FALSE),
sample_data(samdf),
tax_table(taxa))
dna <- Biostrings::DNAStringSet(taxa_names(ps))
View(samdf)
samdf <- data.frame(State=day)
samdf$Status <- "Healthy"
rownames(samdf) <- samples.out
ps <- phyloseq(otu_table(seqtab.nochim, taxa_are_rows=FALSE),
sample_data(samdf),
tax_table(taxa))
View(samdf)
samples.out <- rownames(seqtab.nochim)
subject <- sapply(strsplit(samples.out, "H"), `[`, 1)
gender <- substr(subject,1,1)
subject <- substr(subject,2,999)
day <- as.integer(sapply(strsplit(samples.out, "H"), `[`, 2))
samdf$Status <- "Healthy"
rownames(samdf) <- samples.out
View(samdf)
View(samdf)
rm(samdf)
samples.out <- rownames(seqtab.nochim)
subject <- sapply(strsplit(samples.out, "H"), `[`, 1)
samdf$Status <- "Healthy"
samples.out <- rownames(seqtab.nochim)
subject <- sapply(strsplit(samples.out, "H"), `[`, 1)
subject <- sapply(strsplit(samples.out, "HT"), `[`, 1)
subject <- sapply(strsplit(samples.out, ""), `[`, 1)
subject <- sapply(strsplit(samples.out, ""), `[`, 1:2)
subject <- sapply(strsplit(samples.out, ""), `[`, 1)
subject <- sapply(strsplit(samples.out, ""), `[`, 2)
samples.out <- rownames(seqtab.nochim)
subject <- sapply(strsplit(samples.out, ""), `[`, 2)
samdf$Status <- "Healthy"
samples.out <- rownames(seqtab.nochim)
subject <- sapply(strsplit(samples.out, ""), `[`, 1)
samdf$Status <- "Healthy"
samdf = data.entry()
samdf <- data.frame(Subject=subject)
samdf$Status <- "Healthy"
rownames(samdf) <- samples.out
View(samdf)
ps <- phyloseq(otu_table(seqtab.nochim, taxa_are_rows=FALSE),
sample_data(samdf),
tax_table(taxa))
dna <- Biostrings::DNAStringSet(taxa_names(ps))
names(dna) <- taxa_names(ps)
ps <- merge_phyloseq(ps, dna)
taxa_names(ps) <- paste0("ASV", seq(ntaxa(ps)))
plot_richness(ps, x="Status", measures=c("Shannon", "Simpson"), color="When")
plot_richness(ps, x="status", measures=c("Shannon", "Simpson"), color="When")
ps <- phyloseq(otu_table(seqtab.nochim, taxa_are_rows=FALSE),
sample_data(samdf),
tax_table(taxa))
View(ps)
dna <- Biostrings::DNAStringSet(taxa_names(ps))
names(dna) <- taxa_names(ps)
ps <- merge_phyloseq(ps, dna)
taxa_names(ps) <- paste0("ASV", seq(ntaxa(ps)))
ps
plot_richness(ps, x="status", measures=c("Shannon", "Simpson"), color="When")
# Transform data to proportions as appropriate for Bray-Curtis distances
ps.prop <- transform_sample_counts(ps, function(otu) otu/sum(otu))
ord.nmds.bray <- ordinate(ps.prop, method="NMDS", distance="bray")
plot_ordination(ps.prop, ord.nmds.bray, color="When", title="Bray NMDS")
top20 <- names(sort(taxa_sums(ps), decreasing=TRUE))[1:20]
ps.top20 <- transform_sample_counts(ps, function(OTU) OTU/sum(OTU))
ps.top20 <- prune_taxa(top20, ps.top20)
plot_bar(ps.top20, x="Day", fill="Family") + facet_wrap(~When, scales="free_x")
top20 <- names(sort(taxa_sums(ps), decreasing=TRUE))[1:20]
ps.top20 <- transform_sample_counts(ps, function(OTU) OTU/sum(OTU))
ps.top20 <- prune_taxa(top20, ps.top20)
plot_bar(ps.top20, x="status", fill="subject") + facet_wrap(~When, scales="free_x")
plot_bar(ps.top20, x="status") + facet_wrap(~When, scales="free_x")
top20 <- names(sort(taxa_sums(ps), decreasing=TRUE))[1:20]
ps.top20 <- transform_sample_counts(ps, function(OTU) OTU/sum(OTU))
ps.top20 <- prune_taxa(top20, ps.top20)
plot_bar(ps.top20, x="status") + facet_wrap(~When, scales="free_x")
plot_bar(ps.top20, x="status", fill="Family") + facet_wrap(~When, scales="free_x")
View(ps.top20)
plot_bar(ps.top20, x="day", fill="Family") + facet_wrap(~When, scales="free_x")
plot_bar(ps.top20, x="status", fill="Family") + facet_wrap(~When, scales="free_x")
View(samdf)
plot_bar(ps.top20, x="Status", fill="Family") + facet_wrap(~When, scales="free_x")
ps.top20 <- prune_taxa(top20, ps.top20)
plot_bar(ps.top20, x="Status", fill="Family") + facet_wrap(~When, scales="free_x")
plot_ordination(ps.prop, ord.nmds.bray, color="Status", title="Bray NMDS")
top20 <- names(sort(taxa_sums(ps), decreasing=TRUE))[1:20]
ps.top20 <- transform_sample_counts(ps, function(OTU) OTU/sum(OTU))
ps.top20 <- prune_taxa(top20, ps.top20)
plot_bar(ps.top20, x="Status", fill="Family") + facet_wrap(~When, scales="free_x")
plot_bar(ps.top20, x="Status", fill="Family") + facet_wrap(~Status, scales="free_x")
plot_bar(ps.top20, x="Status", fill="Genus") + facet_wrap(~Status, scales="free_x")
setwd("~/GitHub/Agbio2")
